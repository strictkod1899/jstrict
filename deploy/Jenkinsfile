pipeline{
    agent any

    /*
        При создании pipeline на основе этого необходимо изменить defaultValue для параметра GIT_BRANCH_NAME
    */

    options {
        timeout(time: 1, unit: 'HOURS')
    }

    parameters{
        string(name: 'GIT_BRANCH_NAME', defaultValue: 'develop', description: 'Branch to git interaction')
    }

    triggers{
        pollSCM('H/10 * * * *')
    }

    environment{
        UPDATE_VERSION_MESSAGE = "version updated"
        IS_SHOULD_BUILD = powershell(
            script: """
                git checkout ${params.GIT_BRANCH_NAME}
                git pull origin ${params.GIT_BRANCH_NAME}
                \$lastCommit = git log -1 | Select-String '$UPDATE_VERSION_MESSAGE'
                if(\$lastCommit -ne \$null -And \$lastCommit -ne ""){
                    exit 1
                }
            """,
            returnStatus: true)
    }

    stages {
        stage('check'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                \$gitBranch = "${params.GIT_BRANCH_NAME}"
                if(\$gitBranch -eq \$null -Or \$gitBranch -eq ''){
                    Write-Error ""
                    Write-Error "[ERROR]: DEPLOY ERROR"
                    Write-Error "[ERROR]: Branch for deploy is NULL"
                    Write-Error ""
                    exit 1
                }
                """
            }
        }
        stage('download-dependencies'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                try{
                	deploy/download_dependencies.ps1
                } catch {
                	Write-Warning ""
                    Write-Warning "[WARN]: DOWNLOAD DEPENDENCIES ERROR"
                    Write-Warning "[WARN]: \$(\$_.Exception)"
                    Write-Warning ""
                }
                """
            }
        }
        stage('test'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                try{
                    deploy/test.ps1
                } catch {
                    Write-Error ""
                    Write-Error "[ERROR]: TESTS ERROR"
                    Write-Error "[ERROR]: \$(\$_.Exception)"
                    Write-Error ""
                    exit 1
                }
                """
                junit "**/surefire-reports/*.xml"
            }
        }
        stage('update-version'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                
                # modules without root pom.xml
                \$childModulesPath = "./installer/pom.xml", "./jmq/pom.xml", "./jmq/jmq-rabbit/pom.xml", "./jmq/jmq-kafka/pom.xml", "./jutils/pom.xml", "./ioc/pom.xml", "./jfile/pom.xml", "./jpatterns/pom.xml", "./jfx/pom.xml", "./jswing/pom.xml", "./jneuralnetwork/pom.xml", "./jdb/pom.xml", "./jdb/jdb-core/pom.xml", "./jdb/jdb-migration/pom.xml", "./jdb/jdb-jdbc/pom.xml", "./jdb/jdb-spring/pom.xml", "./jdb/jdb-hibernate/pom.xml", "./jdb/jdb-mybatis/pom.xml"
                \$modulesPath = "./pom.xml", "./installer/pom.xml", "./jmq/pom.xml", "./jmq/jmq-rabbit/pom.xml", "./jmq/jmq-kafka/pom.xml", "./jutils/pom.xml", "./ioc/pom.xml", "./jfile/pom.xml", "./jpatterns/pom.xml", "./jfx/pom.xml", "./jswing/pom.xml", "./jneuralnetwork/pom.xml", "./jdb/pom.xml", "./jdb/jdb-core/pom.xml", "./jdb/jdb-migration/pom.xml", "./jdb/jdb-jdbc/pom.xml", "./jdb/jdb-spring/pom.xml", "./jdb/jdb-hibernate/pom.xml", "./jdb/jdb-mybatis/pom.xml"

                try{
                    # Update versions
                    ./deploy/update_versions_maven.ps1 -modulesPath \$modulesPath
                    
                    # Update parent versions
                    ./deploy/update_parent_version_maven.ps1 -modulesPath \$childModulesPath

                    # Update dependency versions
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jutils" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "ioc" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jfile" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jpatterns" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jfx" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jswing" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jneuralnetwork" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-core" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-migration" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-jdbc" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-spring" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-hibernate" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jdb-mybatis" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "installer" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jmq-rabbit" -modulesPath \$modulesPath
                    ./deploy/update_dependency_version_maven -dependencyGroupId "ru.strict" -dependencyArtifactId "jmq-kafka" -modulesPath \$modulesPath
                } catch {
                    Write-Error ""
                    Write-Error "[ERROR]: UPDATE VERSION ERROR"
                    Write-Error "[ERROR]: \$(\$_.Exception)"
                    Write-Error ""
                    exit 1
                }
                """
                powershell """
                try{
                    ./deploy/git_commit.ps1 -branch ${params.GIT_BRANCH_NAME} -message "$UPDATE_VERSION_MESSAGE"
                } catch {
                    Write-Error ""
                    Write-Error "[ERROR]: GIT COMMIT ERROR"
                    Write-Error "[ERROR]: \$(\$_.Exception)"
                    Write-Error ""
                    exit 1
                }
                """
            }
        }
        stage('build'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                try{
                    deploy/build.ps1
                } catch {
                    Write-Error ""
                    Write-Error "[ERROR]: BUILD ERROR"
                    Write-Error "[ERROR]: \$(\$_.Exception)"
                    Write-Error ""
                    exit 1
                }
                """
            }
        }
        stage('release'){
            when{
                environment name: 'IS_SHOULD_BUILD', value: '0'
            }
            steps{
                powershell """
                try{
                    #deploy/release.ps1
                } catch {
                    Write-Error ""
                    Write-Error "[ERROR]: RELEASE ERROR"
                    Write-Error "[ERROR]: \$(\$_.Exception)"
                    Write-Error ""
                    exit 1
                }
                """
            }
        }
    }

    post {
        success {
            slackSend color: "#14CA1E", message: "SUCCESS - ${env.JOB_NAME} BUILD-#${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
        failure {
            slackSend color: "#BF0000", message: "FAILED - ${env.JOB_NAME} BUILD-#${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }
}
