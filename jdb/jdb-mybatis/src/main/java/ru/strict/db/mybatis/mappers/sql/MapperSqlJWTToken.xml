<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.strict.db.mybatis.mappers.sql.MapperSqlJWTToken">

    <resultMap id="token" type="ru.strict.db.core.entities.EntityJWTToken">
        <id property="id" column="id"/>
        <result property="accessToken" column="access_token"/>
        <result property="refreshToken" column="refresh_token"/>
        <result property="expireTimeAccess" column="expire_time_access"/>
        <result property="expireTimeRefresh" column="expire_time_refresh"/>
        <result property="issuedAt" column="issued_at"/>
        <result property="issuer" column="issuer"/>
        <result property="subject" column="subject"/>
        <result property="notBefore" column="not_before"/>
        <result property="audience" column="audience"/>
        <result property="secret" column="secret"/>
        <result property="algorithm" column="algorithm"/>
        <result property="type" column="type"/>
        <result property="userId" column="userx_id"/>
        <result property="roleUserId" column="roleuser_id"/>
    </resultMap>

    <resultMap id="tokenFill" type="ru.strict.db.core.entities.EntityJWTToken" extends="token">
        <association property="user"
                     column="userx_id"
                     javaType="ru.strict.db.core.entities.EntityUser"
                     select="ru.strict.db.mybatis.mappers.sql.MapperSqlUser.read"
                     fetchType="lazy"/>
        <association property="roleUser"
                     column="roleuser_id"
                     javaType="ru.strict.db.core.entities.EntityRoleuser"
                     select="ru.strict.db.mybatis.mappers.sql.MapperSqlRoleuser.read"
                     fetchType="lazy"/>
    </resultMap>

    <insert id="create" parameterType="ru.strict.db.core.entities.EntityJWTToken">
        INSERT INTO token (id, accessToken, refreshToken, expireTimeAccess, expireTimeRefresh, issuedAt, issuer,
                subject, notBefore, audience, secret, algorithm, type, userx_id, roleuser_id)
        VALUES (#{id}, #{accessToken}, #{refreshToken}, #{expireTimeAccess}, #{expireTimeRefresh}, #{issuedAt}, #{issuer},
                #{subject}, #{notBefore}, #{audience}, #{secret}, #{algorithm}, #{type}, #{userId}, #{roleUserId})
    </insert>

    <select id="read" parameterType="java.lang.Object" resultMap="token">
        SELECT * FROM token WHERE id = #{id}
    </select>

    <select id="readAll" parameterType="String" resultMap="token">
        SELECT * FROM token ${value}
    </select>

    <update id="update" parameterType="ru.strict.db.core.entities.EntityJWTToken">
        UPDATE token SET accessToken = #{accessToken}, refreshToken = #{refreshToken}, expireTimeAccess = #{expireTimeAccess}
         , expireTimeRefresh = #{expireTimeRefresh}, issuedAt = #{issuedAt}, issuer = #{issuer}, subject = #{subject},
         notBefore = #{notBefore}, audience = #{audience}, secret = #{secret}, algorithm = #{algorithm}, type = #{type},
         userx_id = #{userId}, roleuser_id = #{roleUserId}
         WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Object">
        DELETE FROM token WHERE id = #{id}
    </delete>

    <select id="readFill" parameterType="java.lang.Object" resultMap="tokenFill" >
        SELECT * FROM token WHERE id = #{id}
    </select>

    <select id="readAllFill" parameterType="String" resultMap="tokenFill">
        SELECT * FROM token ${value}
    </select>

    <select id="readCount" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM token ${value}
    </select>

    <select id="readByUserId" parameterType="java.lang.Object" resultMap="token">
        SELECT * FROM token WHERE userx_id = #{userId}
    </select>
</mapper>