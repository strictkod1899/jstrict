<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.strict.db.mybatis.mappers.sql.MapperSqlUser">

    <resultMap id="user" type="ru.strict.db.core.entities.EntityUser">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="email" column="email"/>
        <result property="passwordEncode" column="passwordencode"/>
        <result property="isBlocked" column="is_blocked"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="isConfirmEmail" column="is_confirm_email"/>
    </resultMap>

    <resultMap id="userFill" type="ru.strict.db.core.entities.EntityUser" extends="user">
        <association property="profile"
                     column="id"
                     javaType="ru.strict.db.core.entities.EntityProfile"
                     select="ru.strict.db.mybatis.mappers.sql.MapperSqlProfile.readByUserId"
                     fetchType="lazy"/>
        <collection property="roles"
                    column="id"
                    javaType="List"
                    ofType="ru.strict.db.core.entities.EntityRoleuser"
                    select="ru.strict.db.mybatis.mappers.sql.MapperSqlRoleuser.readByUserId"
                    fetchType="lazy"/>
        <collection property="tokens"
                    column="id"
                    javaType="List"
                    ofType="ru.strict.db.core.entities.EntityJWTToken"
                    select="ru.strict.db.mybatis.mappers.sql.MapperSqlJWTToken.readByUserId"
                    fetchType="lazy"/>
    </resultMap>

    <insert id="create" parameterType="ru.strict.db.core.entities.EntityUser">
        INSERT INTO userx (id, username, email, passwordencode, is_blocked, is_deleted, is_confirm_email)
        VALUES (#{id}, #{username}, #{email}, #{passwordEncode}, #{isBlocked}, #{isDeleted}, #{isConfirmEmail})
    </insert>

    <insert id="createGenerateId" parameterType="ru.strict.db.core.entities.EntityUser"
            useGeneratedKeys="true"
            keyColumn="id"
            keyProperty="id">
        INSERT INTO userx (username, email, passwordencode, is_blocked, is_deleted, is_confirm_email)
        VALUES (#{username}, #{email}, #{passwordEncode}, #{isBlocked}, #{isDeleted}, #{isConfirmEmail})
    </insert>

    <select id="read" parameterType="java.lang.Object" resultMap="user">
        SELECT * FROM userx WHERE id = #{id}
    </select>

    <select id="readAll" parameterType="String" resultMap="user">
        SELECT * FROM userx ${value}
    </select>

    <update id="update" parameterType="ru.strict.db.core.entities.EntityUser">
        UPDATE userx SET username = #{username}, email = #{email}, passwordencode = #{passwordEncode},
        is_blocked = #{isBlocked}, is_deleted = #{isDeleted}, is_confirm_email = #{isConfirmEmail}
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Object">
        DELETE FROM userx WHERE id = #{id}
    </delete>

    <select id="readFill" parameterType="java.lang.Object" resultMap="userFill" >
        SELECT * FROM userx WHERE id = #{id}
    </select>

    <select id="readAllFill" parameterType="String" resultMap="userFill">
        SELECT * FROM userx ${value}
    </select>

    <select id="readCount" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM userx ${value}
    </select>

    <select id="readByRoleId" parameterType="java.lang.Object" resultMap="user">
        SELECT * FROM userx WHERE id IN (SELECT userx_id FROM user_on_role WHERE roleuser_id = #{roleId})
    </select>
</mapper>